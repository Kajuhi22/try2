#include<string.h> 
void main()  { 
    char input[100],l[50],r[50],temp[10],tempprod[20],productions[25][50]; 
    int i=0,j=0,flag=0,consumed=0; 
    printf("Enter the productions: "); 
    scanf("%1s->%s",l,r); 
    printf("%s",r); 
    while(sscanf(r+consumed,"%[^|]s",temp) == 1 && consumed <= strlen(r))  { 
        if(temp[0] == l[0])  { 
            flag = 1; 
            sprintf(productions[i++],"%s->%s%s'\0",l,temp+1,l); 
        } 
        else 
            sprintf(productions[i++],"%s'->%s%s'\0",l,temp,l); 
        consumed += strlen(temp)+1; 
    } 
    if(flag == 1)  { 
        sprintf(productions[i++],"%s->ε\0",l); 
        printf("The productions after eliminating Left Recursion are:\n"); 
        for(j=0;j<i;j++) 
            printf("%s\n",productions[j]); 
    } 
    else 
        printf("The Given Grammar has no Left Recursion"); 
}  







#include<stdio.h>   
#include<string.h>   
int main()   
{   
    char 
gram[20],part_1[20],part_2[20],modified_Gram[20],new_Gram[20],temp_Gram[20];   
    int I,j=0,k=0,l=0,pos;   
printf(“Enter the Production : A->”);   
    gets(gram);   
    for(i=0;gram[i]!=’|’;i++,j++)   
        part_1[j]=gram[i];   
    part_1[j]=’\0’;   
    for(j=++I,i=0;gram[j]!=’\0’;j++,i++)   
        part_2[i]=gram[j];   
    part_2[i]=’\0’;   
    for(i=0;i<strlen(part_1)||i<strlen(part_2);i++){   
        if(part_1[i]==part_2[i]){   
modified_Gram[k]=part_1[i];   
            k++;   
pos=i+1;   
        }   
    }   
    for(i=pos,j=0;part_1[i]!=’\0’;i++,j++){   
new_Gram[j]=part_1[i];   
    }   
new_Gram[j++]=’|’;   
    for(i=pos;part_2[i]!=’\0’;i++,j++){   
new_Gram[j]=part_2[i];   
    }   
modified_Gram[k]=’X’;   
modified_Gram[++k]=’\0’;   
new_Gram[j]=’\0’;   
printf(“\nGrammar Without Left Factoring is: \n”);   
printf(“ A->%s”,modified_Gram);   
printf(“\n X->%s\n”,new_Gram);   
}  

